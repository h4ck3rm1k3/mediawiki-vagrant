# == Class: Thumbor
#
# This Puppet class installs and configures a Thumbor instance
#
# Thumbor is installed as a Python package, and as part of that,
# pip compiles lxml.
#
# === Parameters
#
# [*deploy_dir*]
#   Path where Thumbor should be installed (example: '/var/thumbor').
#
# [*cfg_file*]
#   Thumbor configuration file. The file will be generated by Puppet.
#
# [*statsd_port*]
#   Port the statsd instance runs on.
#
# [*sentry_dsn_file*]
#   Path to file containing the sentry dsn file.
#
class thumbor (
    $deploy_dir,
    $cfg_file,
    $statsd_port,
    $sentry_dsn_file,
) {
    require ::virtualenv
    # Needed by the venv, which clones a few git repos
    require ::git

    # jpegtran
    require_package('libjpeg-progs')

    # exiftool is needed by exif-optimizer
    require_package('libimage-exiftool-perl')

    # opencv engine
    # activate it with ENGINE='opencv_engine' in thumbor.conf.erb
    # not used here by default because of https://github.com/thumbor/opencv-engine/issues/16
    require_package('python-opencv')

    # For GIF engine
    require_package('gifsicle')

    # For SVG engine
    require_package('librsvg2-bin')

    # For Video engine
    require_package('ffmpeg')

    # For XCF engine
    require_package('xcftools')

    # For DjVu engine
    require_package('djvulibre-bin')

    # For Ghostscript engine (PDF)
    require_package('ghostscript')

    $statsd_host = 'localhost'
    $statsd_prefix = 'Thumbor'

    group { 'thumbor':
        ensure => present,
    }

    user { 'thumbor':
        ensure  => present,
        home    => '/var/run/thumbor',
        gid     => 'thumbor',
        require => Group['thumbor'],
    }

    virtualenv::environment { $deploy_dir:
        ensure   => present,
        packages => [
            'cv2',
            'numpy',
            'opencv-engine',
            'raven',
            'python-swiftclient',
            'git+git://github.com/gi11es/thumbor.git',
            'git+git://github.com/thumbor-community/core',
            'git+https://phabricator.wikimedia.org/diffusion/THMBREXT/thumbor-plugins.git',
        ],
        require  => [
            Package['libjpeg-progs'],
            Package['python-opencv'],
            # Needs to be an explicit dependency, for the packages pointing to git repos
            Package['git'],
        ],
        timeout  => 600, # This venv can be particularly long to download and setup
    }

    # Hack because pip install cv2 inside a virtualenv is broken
    file { "${deploy_dir}/lib/python2.7/site-packages/cv2.so":
        ensure  => present,
        # From python-opencv
        source  => '/usr/lib/python2.7/dist-packages/cv2.so',
        require => Virtualenv::Environment[$deploy_dir],
    }

    file { "${deploy_dir}/tinyrgb.icc":
        ensure => present,
        source => 'puppet:///modules/thumbor/tinyrgb.icc',
    }

    file { $cfg_file:
        ensure    => present,
        group     => 'thumbor',
        content   => template('thumbor/thumbor.conf.erb'),
        mode      => '0640',
        subscribe => File[$sentry_dsn_file],
        require   => User['thumbor'],
    }

    cgroup::config { 'thumbor':
        limits  => "perm { task { uid = thumbor; gid = thumbor; } admin { uid = thumbor; gid = thumbor; } } memory { memory.limit_in_bytes = \"1048576000\"; }", # 1GB
        cgrules => '@thumbor memory thumbor',
    }

    file { '/etc/init/thumbor.conf':
        ensure  => present,
        content => template('thumbor/upstart.erb'),
        mode    => '0444',
    }

    service { 'thumbor':
        ensure    => running,
        enable    => true,
#        provider  => 'upstart',
        require   => [
            Virtualenv::Environment[$deploy_dir],
            User['thumbor'],
        ],
        subscribe => [
            File["${deploy_dir}/tinyrgb.icc", $cfg_file, '/etc/init/thumbor.conf'],
            Cgroup::Config['thumbor'],
        ],
    }

    varnish::backend { 'swift':
        host   => '127.0.0.1',
        port   => $::swift::port,
        onlyif => 'req.url ~ "^/images/.*"',
    }

    varnish::backend { 'thumbor':
        host   => '127.0.0.1',
        port   => '8888',
        onlyif => 'req.url ~ "^/images/thumb/.*"',
    }

    varnish::config { 'thumbor':
        content => template('thumbor/varnish.vcl.erb'),
        order   => 49, # Needs to be before default for vcl_recv override
    }
}
